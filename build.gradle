// Gradle repositories and dependencies
buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1'
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// Apply plugin
apply plugin: 'java'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

// Default tasks
defaultTasks 'licenseFormat', 'check', 'build'

// Basic project information
group = 'com.cleanroommc'
archivesBaseName = 'cleanmix'
version = buildVersion + "+mixin." + upstreamMixinVersion

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Project repositories
repositories {
    mavenCentral()
    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net/'
    }
}

configurations {
    agentImplementation.extendsFrom implementation
}

sourceSets {
    ap {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    agent {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

// Project dependencies
dependencies {
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.ow2.asm:asm-tree:9.6'
    implementation 'org.ow2.asm:asm-commons:9.6'
    implementation 'org.ow2.asm:asm-util:9.6'
    // TODO: slf4j
    implementation 'org.apache.logging.log4j:log4j-api:2.22.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.0'

    apImplementation 'org.ow2.asm:asm-tree:9.6'
    apImplementation 'com.google.guava:guava:32.1.3-jre'
    apImplementation 'com.google.code.gson:gson:2.10.1'
}

javadoc {
    exclude '**/throwables'
    classpath += sourceSets.main.output
    source sourceSets.ap.allJava
    options.encoding = 'UTF-8'
    exclude {
        it.relativePath.file && it.relativePath.pathString =~ 'tools' && !(it.name =~ /SuppressedBy|package-info/) }
    options {
        docTitle 'Welcome to the Mixin Javadoc'
        overview 'docs/javadoc/overview.html'
        stylesheetFile file('docs/javadoc/mixin.css')
        addBooleanOption '-allow-script-in-comments', true
    }
    doLast {
        copy {
            from 'docs/javadoc/resources'
            into outputDirectory
        }
    }
}

// Filter, process, and include resources
processResources {
    // Include in final JAR
   from 'LICENSE.txt'
}

// License header formatting
license {
    ext {
        name = "Mixin"
        organization = "SpongePowered"
        url = "https://www.spongepowered.org"
    }
    include '**/*.java'
    header file("HEADER.txt")
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path', '-proc:none']
    options.deprecation = true
    options.encoding = 'utf8'
}

jar {
    manifest.attributes([
            'Specification-Title'   : 'org.spongepowered',
            'Specification-Vendor'  : 'SpongePowered',
            'Specification-Version' : '0.8.5',
            'Implementation-Title'  : project.group,
            'Implementation-Version': buildVersion,
            'Implementation-Vendor' : 'CleanroomMC',
            "Premain-Class": "org.spongepowered.tools.agent.MixinAgent",
            "Agent-Class": "org.spongepowered.tools.agent.MixinAgent",
            "Can-Redefine-Classes": true,
            "Can-Retransform-Classes": true
    ])
}

task stagingJar(type: ShadowJar) {
    sourceSets.findAll { !(it.name =~ /example|test/) }.each {
        from it.output
    }
    mergeServiceFiles()
    archiveClassifier = "staging"
}

// Clear artifacts because jar will be there by default and we want to use staging jar instead
configurations.archives.artifacts.clear()

// generate shadow jar so we can use the AP standalone
shadowJar {
    from sourceSets.ap.output
    archiveClassifier = 'processor'
}
build.dependsOn(shadowJar)

// Run this task instead of build to generate a timestamped shadow jar (for dev)
task timestamp(type: Jar, dependsOn: build) {
    if (gradle.startParameter.taskNames.contains(name)) {
        shadowJar.archiveClassifier = new Date().format('yyyyMMddHHmmss')
    }
}

task sourceJar(type: Jar) {
    sourceSets.each {
        from it.java
        from it.resources
    }
    archiveClassifier = "sources"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
    archiveClassifier = "javadoc"
}

artifacts {
    archives stagingJar
    archives sourceJar
    archives javadocJar
    archives shadowJar
}
