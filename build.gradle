// Gradle repositories and dependencies
buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1'
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// Apply plugin
apply plugin: 'java'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

// Default tasks
defaultTasks 'licenseFormat', 'check', 'build'

// Basic project information
group = 'com.cleanroommc'
archivesBaseName = 'cleanmix'
version = buildVersion + "+mixin." + upstreamMixinVersion

// Define variables
ext.asmVersion = asmVersion

// Minimum version of Java required
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// Project repositories
repositories {
    mavenCentral()
    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net/'
    }
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
}

configurations {
    stagingJar
    
    exampleImplementation       .extendsFrom implementation
    launchwrapperImplementation .extendsFrom implementation
    agentImplementation         .extendsFrom implementation
}

sourceSets {
    main {
        ext.languageVersion = 8
        ext.compatibility = '1.6'
    }
    ap {
        compileClasspath += main.output
        ext.languageVersion = 8
        ext.compatibility = '1.8'
    }
    agent {
        compileClasspath += main.output
        ext.languageVersion = 8
        ext.compatibility = '1.6'
    }
    example {
        compileClasspath += main.output
        compileClasspath += ap.output
    }
    test { }
    launchwrapper {
        compileClasspath += main.output
        ext.languageVersion = 8
        ext.compatibility = '1.8'
    }
}

// Project dependencies
dependencies {
    def guava = 'com.google.guava:guava:21.0' // from mc1.12 onwards
    def gson = 'com.google.code.gson:gson:2.2.4'

    stagingJar guava
    stagingJar gson

    implementation guava
    implementation 'com.google.code.gson:gson:2.2.4'
    implementation "org.ow2.asm:asm-tree:$asmVersion"
    implementation "org.ow2.asm:asm-commons:$asmVersion"
    implementation "org.ow2.asm:asm-util:$asmVersion"

    // Annotation Processor
    apImplementation "org.ow2.asm:asm-tree:$asmVersion"
    apImplementation guava
    apImplementation gson

    // LegacyLauncher service
    launchwrapperImplementation ('net.minecraft:launchwrapper:1.11') {
        exclude module: 'lwjgl'
        exclude module: 'asm-debug-all'
        exclude module: 'jopt-simple'
    }
}

javadoc {
    exclude '**/throwables'
    classpath += sourceSets.main.output
    source sourceSets.ap.allJava
    options.encoding = 'UTF-8'
    exclude {
        it.relativePath.file && it.relativePath.pathString =~ 'tools' && !(it.name =~ /SuppressedBy|package-info/) }
    options {
        docTitle 'Welcome to the Mixin Javadoc'
        overview 'docs/javadoc/overview.html'
        stylesheetFile file('docs/javadoc/mixin.css')
        addBooleanOption '-allow-script-in-comments', true
    }
    doLast {
        copy {
            from 'docs/javadoc/resources'
            into outputDirectory
        }
    }
}

// Filter, process, and include resources
processResources {
    // Include in final JAR
   from 'LICENSE.txt'
}

// License header formatting
license {
    ext {
        name = "Mixin"
        organization = "SpongePowered"
        url = "https://www.spongepowered.org"
    }
    include '**/*.java'
    header file("HEADER.txt")
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path', '-proc:none']
    options.deprecation = true
    options.encoding = 'utf8'
}

project.sourceSets.each { set -> {
    if (set.ext.has("languageVersion")) {
        project.tasks[set.compileJavaTaskName].javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(set.ext.languageVersion)
        }
    } 
    if (set.ext.has("compatibility")) {
        project.tasks[set.compileJavaTaskName].sourceCompatibility = set.ext.compatibility
        project.tasks[set.compileJavaTaskName].targetCompatibility = set.ext.compatibility
    }
}}

task stagingJar(type: ShadowJar) {
    sourceSets.findAll { !(it.name =~ /example|test/) }.each {
        from it.output
    }
    configurations = [project.configurations.stagingJar]
    
    // JAR manifest configuration
    manifest.attributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": project.version,
        // "Implementation-Vendor": url,
        // for hotswap agent
        "Premain-Class": "org.spongepowered.tools.agent.MixinAgent",
        "Agent-Class": "org.spongepowered.tools.agent.MixinAgent",
        "Can-Redefine-Classes": true,
        "Can-Retransform-Classes": true
    )
    
    mergeServiceFiles()
    // relocate 'com.google', 'org.spongepowered.include.com.google'
    archiveClassifier = "staging"
}

// Clear artifacts because jar will be there by default and we want to use staging jar instead
configurations.archives.artifacts.clear()

// generate shadow jar so we can use the AP standalone
shadowJar  {
    from sourceSets.ap.output
    archiveClassifier = 'processor'
}
build.dependsOn(shadowJar)

// Run this task instead of build to generate a timestamped shadow jar (for dev)
task timestamp(type: Jar, dependsOn: build) {
    if (gradle.startParameter.taskNames.contains(name)) {
        shadowJar.archiveClassifier = new Date().format('yyyyMMddHHmmss')
    }
}

task sourceJar(type: Jar) {
    sourceSets.each {
        from it.java
        from it.resources
    }
    archiveClassifier = "sources"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
    archiveClassifier = "javadoc"
}

artifacts {
    archives stagingJar
    archives sourceJar
    archives javadocJar
    archives shadowJar
}

ext.excludePomDeps = [
    'fernflower',
    'jarjar',
    'hamcrest-library',
    'junit',
    'mockito-core',
    'mixin-asm-debug-all',
    'log4j-core'
]

